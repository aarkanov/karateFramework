buildscript {
    ext {
        frameworkVersion = "1.0.0"
        springBootVersion = '2.1.0.RELEASE'
        springVersion = '5.1.7.RELEASE'
        gradleVersionProperty = '5.4'
        karateVersion = '0.9.2'
        masterThoughtVersion = '3.8.0'
        activeMqVersion = '5.15.2'
    }
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url "http://repo.spring.io/release" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://repo.spring.io/snapshot" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
sourceCompatibility = 1.8
targetCompatibility = 1.8
libsDirName = "${projectDir}/framework-jar"

task fatJar(type: Jar) {
	manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',  
        	'Implementation-Version': karateVersion
    }
    baseName = project.name + "-" + frameworkVersion
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

bootRun {
    systemProperties = System.properties
}

// In this section you declare where to find the dependencies of your project
repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
    maven { url "http://repo.spring.io/release" }
    maven { url "http://repo.spring.io/milestone" }
    maven { url "http://repo.spring.io/snapshot" }
}

sourceSets {
    test {
        java {
            // Excluding UIRunner files as these require the javafx libraries
            // which are not shipped with OpenJDK. These UIRunner classes are
            // classes that allow developers to run/debug karate tests via a UI
            // and as such are not required for headless runs on jenkins server
            // but can run happily via IDE of the developer without needed to be
            // compiled by gradle.
            srcDir file('src/test/java')
            exclude '**/*UiRunner*.java'
        }
        resources {
            // Using recommended karate project layout where karate feature files
            // and associated javascript resources sit in same /test/java folders
            // as their java counterparts.
            srcDir file('src/test/java')
            exclude '**/*.java'
        }
    }
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-security'
    compile 'org.springframework:spring-jdbc:' + springVersion
    compile 'com.github.java-json-tools:json-schema-validator:2.2.8'
    compile 'commons-io:commons-io:2.5'
    runtime 'com.h2database:h2:1.4.196'
    compile 'junit:junit'
    compile 'com.intuit.karate:karate-junit4:' + karateVersion
    compile 'com.intuit.karate:karate-netty:' + karateVersion
    compile 'org.apache.activemq:activemq-broker:' + activeMqVersion
    compile 'org.apache.activemq:activemq-client:' + activeMqVersion
    compile 'org.apache.activemq:activemq-kahadb-store:' + activeMqVersion
    compile 'org.apache.geronimo.specs:geronimo-jms_1.1_spec:1.1.1'
    compile 'net.masterthought:cucumber-reporting:' + masterThoughtVersion
}

test {
    systemProperties = System.properties
    // Ensure tests are always run
    outputs.upToDateWhen { false }
    // attach debugger
    if (System.getProperty('debug', 'false') == 'true') {
        jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9009'
    }
    finalizedBy jacocoTestReport
}

wrapper {
    gradleVersion = gradleVersionProperty
}